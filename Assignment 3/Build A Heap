#include <iostream>
using namespace std;
#include <vector>

class Heap {
	private:
    	vector<int> arr;
    
    public:
    
    int top(){
    //return top element
    int currentMin = arr[0];
    return currentMin;
   	}
    
    void heapifyUp(vector<int> array, int a){
        int i = (array.size()-1)/2;
        if(array[array.size()] > array[i]){
            int temp = array[array.size()];
            array[array.size()] = array[i];
            array[i] = temp;
            heapifyUp(array, i);
        }
    }
    
    void insert(int x){
    arr[arr.size()] = x;
    heapifyUp(arr, arr.size());
    }
    
  void heapifyDown(vector<int> array, int i){
    int larger = i;
    int left = 2*i+1;
    int right = 2*i+2;
    
    if(l< array.size()-1 && array[l] > array[larger]){
        larger = l;
    }
    else if(r < array.size()-1 && array[r]) > array[larger]){
        larger = r;
    } 
    
    if(larger != i){
        int temp = arr[i];
        arr[i] = arr[largest];
        arr[largest] = temp;
        heapifyDown(array, larger);
    }
    }
    
    void remove(){
    //remove top element 
    //fix heap -> heapify root
    
    int top = arr[0];
    int bottom = arr[arr.size() - 1];
    arr[0] = bottom;
    arr[arr.size() - 1] = top;
    arr.pop_back();
    
    heapifyUp(arr, 0);
    }
    
}
