#include <iostream>
using namespace std;
#include <vector>

void bfs(int i, int j, vector<vector<char>> grid){
    int rows = grid.size();
    int cols = grid[0].size();
    vector<pair<int, int>> direction = {{1,0}, {-1,0}, {0,1}, {0,-1}}; 
    queue<pair<int, int>> q;
    q.push({i,j});
    while(!q.empty()){
        pair<int, int> current = q.front();
        q.pop();
        int a = current.first;
        int b = current.second;
        grid[a,b] = '0';
        for(auto &c : directions){
            q.push({a+c.first, b+c.second});
        }
    }
}

int numberOfIslands(vector<vector<char>> grid){
    int rows = grid.size();
    int cols = grid[0].size();
    int count = 0;
    vector<vector<int>> visited(rows, vector<int>(cols, 0));
    
    for(int i = 0; i < rows; i++){
        for(int j = 0; j < cols; j++){
            if(grid[i][j] == '1'){
                count++;
                bfs(i, j, grid);
            }
        }
    }
}
